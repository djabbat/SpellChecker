#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏ –≥—Ä—É–∑–∏–Ω—Å–∫–æ–≥–æ —Å–ø–µ–ª–ª—á–µ–∫–µ—Ä–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: —Å–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞, –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–π
"""

import os
import sys
import pickle
import time
from pathlib import Path
import subprocess
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "2_basis"))
sys.path.insert(0, str(project_root / "4_advanced"))

def print_step(step_number, description):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —à–∞–≥–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print(f"\n{'='*60}")
    print(f"üöÄ –®–ê–ì {step_number}: {description}")
    print(f"{'='*60}")

def run_python_script(script_path, args=None):
    """–ó–∞–ø—É—Å–∫ Python —Å–∫—Ä–∏–ø—Ç–∞"""
    if args is None:
        args = []
    
    script_full_path = project_root / script_path
    if not script_full_path.exists():
        print(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        return False
    
    try:
        cmd = [sys.executable, str(script_full_path)] + args
        print(f"üìù –ó–∞–ø—É—Å–∫: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=project_root)
        
        if result.returncode == 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {script_path}")
            if result.stdout:
                print(f"üìã –í—ã–≤–æ–¥: {result.stdout}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {script_path}:")
            print(f"stderr: {result.stderr}")
            print(f"stdout: {result.stdout}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_path}: {e}")
        return False

def ensure_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        "1_collect/corpus",
        "2_basis/processed_corpus", 
        "2_basis/hunspell_georgian",
        "4_advanced",
        "5_web/static/css",
        "5_web/static/js",
        "5_web/templates"
    ]
    
    for dir_path in directories:
        full_path = project_root / dir_path
        full_path.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")

def collect_corpus():
    """–°–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞ —Ç–µ–∫—Å—Ç–æ–≤"""
    print_step(1, "–°–ë–û–† –¢–ï–ö–°–¢–û–í–û–ì–û –ö–û–†–ü–£–°–ê")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ—Ä–ø—É—Å
    corpus_dir = project_root / "1_collect" / "corpus"
    if corpus_dir.exists() and any(corpus_dir.iterdir()):
        print("üìö –ö–æ—Ä–ø—É—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä...")
        return True
    
    print("üì• –°–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞ —Å –≤–µ–±-—Å–∞–π—Ç–æ–≤...")
    return run_python_script("1_collect/corpus.py")

def build_basic_model():
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    print_step(2, "–ü–û–°–¢–†–û–ï–ù–ò–ï –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–µ–ª–ª—á–µ–∫–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
    success = run_python_script("2_basis/georgian_spellchecker.py", ["--build"])
    
    if not success:
        print("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –æ–±—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
        success = run_python_script("2_basis/georgian_spellchecker.py", ["--train"])
    
    return success

def expand_corpus():
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞"""
    print_step(3, "–†–ê–°–®–ò–†–ï–ù–ò–ï –ö–û–†–ü–£–°–ê")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å –∫–æ—Ä–ø—É—Å
    corpus_dir = project_root / "1_collect" / "corpus"
    txt_files = list(corpus_dir.glob("*.txt"))
    
    if len(txt_files) < 10:  # –ï—Å–ª–∏ –º–∞–ª–æ —Ñ–∞–π–ª–æ–≤, —Ä–∞—Å—à–∏—Ä—è–µ–º
        print("üìà –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏...")
        return run_python_script("3_expand/expand_corpus.py")
    else:
        print(f"üìö –ö–æ—Ä–ø—É—Å —Å–æ–¥–µ—Ä–∂–∏—Ç {len(txt_files)} —Ñ–∞–π–ª–æ–≤, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return True

def build_advanced_model():
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏"""
    print_step(4, "–ü–û–°–¢–†–û–ï–ù–ò–ï –ü–†–û–î–í–ò–ù–£–¢–û–ô –ú–û–î–ï–õ–ò")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    basic_model_path = project_root / "2_basis" / "georgian_spellchecker.pkl"
    if not basic_model_path.exists():
        print("‚ùå –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥ 2.")
        return False
    
    print("üß† –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏ —Å N-gram...")
    return run_python_script("4_advanced/advanced_spellchecker.py", ["--build"])

def merge_models():
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–µ–π"""
    print_step(5, "–û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π
        from georgian_spellchecker import GeorgianSpellChecker
        from advanced_spellchecker import AdvancedGeorgianSpellChecker
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
        basic_model = GeorgianSpellChecker()
        basic_model_path = project_root / "2_basis" / "georgian_spellchecker.pkl"
        
        if basic_model_path.exists():
            basic_model.load_model(str(basic_model_path))
            print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(basic_model.vocabulary)} —Å–ª–æ–≤")
        else:
            print("‚ùå –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏...")
        advanced_model = AdvancedGeorgianSpellChecker()
        advanced_model_path = project_root / "4_advanced" / "advanced_georgian_spellchecker.pkl"
        
        if advanced_model_path.exists():
            advanced_model.load_advanced_model(str(advanced_model_path))
            print(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(advanced_model.vocabulary)} —Å–ª–æ–≤")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä–∏
            print("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π...")
            merged_vocabulary = basic_model.vocabulary.union(advanced_model.vocabulary)
            merged_word_freq = basic_model.word_freq.copy()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—ã –∏–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏
            for word, freq in advanced_model.word_freq.items():
                if word in merged_word_freq:
                    merged_word_freq[word] += freq
                else:
                    merged_word_freq[word] = freq
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
            merged_model = AdvancedGeorgianSpellChecker()
            merged_model.vocabulary = merged_vocabulary
            merged_model.word_freq = merged_word_freq
            
            # –ö–æ–ø–∏—Ä—É–µ–º N-gram –º–æ–¥–µ–ª–∏ –∏–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≤–µ—Ä—Å–∏–∏
            if hasattr(advanced_model, 'bigram_model'):
                merged_model.bigram_model = advanced_model.bigram_model
                print(f"‚úÖ –ë–∏–≥—Ä–∞–º–º—ã: {sum(len(v) for v in advanced_model.bigram_model.values())}")
            
            if hasattr(advanced_model, 'trigram_model'):
                merged_model.trigram_model = advanced_model.trigram_model
                print(f"‚úÖ –¢—Ä–∏–≥—Ä–∞–º–º—ã: {sum(len(v) for v in advanced_model.trigram_model.values())}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            merged_model_path = project_root / "4_advanced" / "merged_georgian_spellchecker.pkl"
            merged_model.save_advanced_model(str(merged_model_path))
            
            print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {merged_model_path}")
            print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å: {len(merged_vocabulary)} —Å–ª–æ–≤")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –≤–µ–±-–ø–∞–ø–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            web_model_path = project_root / "5_web" / "merged_georgian_spellchecker.pkl"
            shutil.copy2(merged_model_path, web_model_path)
            print(f"üåê –ú–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {web_model_path}")
            
            return True
        else:
            print("‚ùå –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()
        return False

def create_fallback_model():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"""
    print_step(6, "–°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ú–û–î–ï–õ–ò")
    
    try:
        from advanced_spellchecker import AdvancedGeorgianSpellChecker
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        basic_words = {
            '·Éí·Éê·Éõ·Éê·É†·ÉØ·Éù·Éë·Éê', '·É†·Éù·Éí·Éù·É†', '·ÉÆ·Éê·É†', '·Éì·É¶·Éî·É°', '·Éô·Éê·É†·Éí·Éò', '·Éê·Éõ·Éò·Éú·Éì·Éò', 
            '·É°·Éê·É•·Éê·É†·Éó·Éï·Éî·Éö·Éù', '·Éó·Éë·Éò·Éö·Éò·É°·Éò', '·Éî·Éú·Éê', '·Éû·É†·Éù·Éí·É†·Éê·Éõ·Éê', '·Éô·Éù·Éõ·Éû·Éò·É£·É¢·Éî·É†·Éò',
            '·É´·Éê·Éö·Éò·Éê·Éú', '·Éö·Éê·Éõ·Éê·Éñ·Éò', '·É•·Éê·Éö·Éê·É•·Éò', '·É¢·É£·É†·Éò·É°·É¢·Éò', '·É¨·Éî·É†·É°', '·Éô·Éù·Éì·Éò',
            '·Éû·Éò·Éó·Éù·Éú·Éò', '·É¢·Éî·É•·É°·É¢·Éò', '·É®·Éî·É™·Éì·Éù·Éõ·Éê', '·É°·É¨·Éù·É†·Éò', '·É®·Éî·Éõ·Éù·É¨·Éõ·Éî·Éë·Éê', '·Éë·Éí·Éî·É†·Éê',
            '·É°·Éê·Éö·Éê·Éõ·Éò', '·Éë·Éê·É†·Éò', '·É∞·Éî·Éò', '·Éõ·Éê·É®·Éò·Éú', '·É®·Éî·Éõ·Éì·Éî·Éí', '·Éê·Éì·É†·Éî', '·Éí·Éï·Éò·Éê·Éú',
            '·Éì·Éò·Éì·Éò', '·Éû·Éê·É¢·Éê·É†·Éê', '·Éê·ÉÆ·Éê·Éö·Éò', '·É´·Éï·Éî·Éö·Éò', '·É°·É¨·É†·Éê·É§·Éò', '·Éú·Éî·Éö·Éò', '·É™·ÉÆ·Éî·Éö·Éò',
            '·É™·Éò·Éï·Éò', '·Éó·Éî·Éó·É†·Éò', '·É®·Éê·Éï·Éò', '·É¨·Éò·Éó·Éî·Éö·Éò', '·Éõ·É¨·Éï·Éê·Éú·Éî', '·Éö·É£·É†·ÉØ·Éò', '·Éß·Éï·Éò·Éó·Éî·Éö·Éò',
            '·É°·É¢·É£·Éì·Éî·Éú·É¢·Éò', '·Éõ·Éê·É°·É¨·Éê·Éï·Éö·Éî·Éë·Éî·Éö·Éò', '·É°·Éô·Éù·Éö·Éê', '·É£·Éú·Éò·Éï·Éî·É†·É°·Éò·É¢·Éî·É¢·Éò', '·É¨·Éò·Éí·Éú·Éò',
            '·É§·É£·Éö·Éò', '·É°·Éê·Éõ·É£·É®·Éê·Éù', '·Éù·ÉØ·Éê·ÉÆ·Éò', '·Éõ·Éî·Éí·Éù·Éë·Éê·É†·Éò', '·É°·Éò·Éß·Éï·Éê·É†·É£·Éö·Éò', '·É™·ÉÆ·Éù·Éï·É†·Éî·Éë·Éê'
        }
        
        fallback_model = AdvancedGeorgianSpellChecker()
        fallback_model.vocabulary = basic_words
        fallback_model.word_freq = {word: 1 for word in basic_words}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –º–æ–¥–µ–ª—å
        fallback_path = project_root / "5_web" / "fallback_spellchecker.pkl"
        fallback_model.save_advanced_model(str(fallback_path))
        
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {len(basic_words)} —Å–ª–æ–≤")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print_step(7, "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
    
    test_cases = [
        "·Éí·Éê·Éõ·Éê·É†·ÉØ·Éù·Éë·Éê ·É†·Éù·Éí·Éù·É† ·ÉÆ·Éê·É†",
        "·Éí·Éê·Éõ·Éê·É†·ÉØ·Éê·Éë·Éê ·É†·Éù·Éí·Éù·Éó ·ÉÆ·Éê·É†·Éó",
        "·Éî·É° ·Éê·É†·Éò·É° ·É°·Éê·É¢·Éî·É°·É¢·Éù ·É¢·Éî·É•·É°·É¢·Éò",
        "·Éû·É†·Éù·Éí·É†·Éê·Éõ·Éê ·Éô·Éù·Éõ·Éû·Éò·É£·É¢·Éî·É†·Éò ·É¢·Éî·É•·Éú·Éù·Éö·Éù·Éí·Éò·Éê"
    ]
    
    try:
        from advanced_spellchecker import AdvancedGeorgianSpellChecker
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        merged_path = project_root / "4_advanced" / "merged_georgian_spellchecker.pkl"
        if merged_path.exists():
            model = AdvancedGeorgianSpellChecker()
            model.load_advanced_model(str(merged_path))
            model_name = "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è"
        else:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –º–æ–¥–µ–ª—å
            advanced_path = project_root / "4_advanced" / "advanced_georgian_spellchecker.pkl"
            if advanced_path.exists():
                model = AdvancedGeorgianSpellChecker()
                model.load_advanced_model(str(advanced_path))
                model_name = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è"
            else:
                # –ü—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
                basic_path = project_root / "2_basis" / "georgian_spellchecker.pkl"
                if basic_path.exists():
                    from georgian_spellchecker import GeorgianSpellChecker
                    model = GeorgianSpellChecker()
                    model.load_model(str(basic_path))
                    model_name = "–ë–∞–∑–æ–≤–∞—è"
                else:
                    print("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
                    return False
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {model_name} –º–æ–¥–µ–ª–∏:")
        print(f"üìä –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(model.vocabulary)}")
        
        for text in test_cases:
            print(f"\nüìù –¢–µ–∫—Å—Ç: '{text}'")
            errors = model.check_text(text)
            
            if errors:
                for word, suggestions in errors:
                    print(f"   ‚ùå '{word}' -> {suggestions[:3]}")
            else:
                print("   ‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ë–û–†–ö–ò –ì–†–£–ó–ò–ù–°–ö–û–ì–û –°–ü–ï–õ–õ–ß–ï–ö–ï–†–ê")
    print("=" * 60)
    
    start_time = time.time()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        ensure_directories()
        
        # –®–∞–≥ 1: –°–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞
        if not collect_corpus():
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –∫–æ—Ä–ø—É—Å–∞...")
        
        # –®–∞–≥ 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        if not build_basic_model():
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏!")
            return
        
        # –®–∞–≥ 3: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        expand_corpus()
        
        # –®–∞–≥ 4: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏
        if not build_advanced_model():
            print("‚ö†Ô∏è  –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é...")
        
        # –®–∞–≥ 5: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not merge_models():
            print("‚ö†Ô∏è  –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å...")
        
        # –®–∞–≥ 6: –†–µ–∑–µ—Ä–≤–Ω–∞—è –º–æ–¥–µ–ª—å
        create_fallback_model()
        
        # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_models()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = time.time()
        execution_time = end_time - start_time
        
        print(f"\n{'='*60}")
        print("üéâ –°–ë–û–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"{'='*60}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
        print(f"   python run_web_simple.py")
        print(f"   –∏–ª–∏")
        print(f"   cd 5_web && python web_interface.py")
        print(f"\nüåê –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5000")
        print(f"{'='*60}")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()